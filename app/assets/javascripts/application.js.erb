// This is a manifest file that'll be compiled into application.js, which will include all the files
// listed below.
//
// Any JavaScript/Coffee file within this directory, lib/assets/javascripts, vendor/assets/javascripts,
// or vendor/assets/javascripts of plugins, if any, can be referenced here using a relative path.
//
// It's not advisable to add code directly here, but if you do, it'll appear at the bottom of the
// compiled file.
//
// Read Sprockets README (https://github.com/sstephenson/sprockets#sprockets-directives) for details
// about supported directives.
//
//= require jquery
//= require jquery_ujs
//= require turbolinks
//= require_tree .
//= require phaser
//= require game.js.erb

$(function () {
    fetchAndRenderScore();
});

function fetchAndRenderScore() {
    $.get('/scores').done(function (score) {
        score.forEach(renderScore);
    })
}

function renderScore(score) {
    var score = score.score;

    var ul = $('<ul>').addClass('scoreList');
    var listItem = $('<li>').text(score).addClass('scoreValue');
    ul.append(listItem)
    $('.scores').append(ul)
   
}

var game = new Phaser.Game(800, 600, Phaser.AUTO, 'game', {
    preload: preload,
    create: create,
    update: update
});

function preload() {                
    game.load.tilemap('level_one', "<%= asset_path 'big_level.json'%>", null, Phaser.Tilemap.TILED_JSON);
    game.load.image('tiles', "<%= asset_path 'castle_0.png'%>"); 
    game.load.spritesheet('dude',"<%= asset_path 'jedi.png'%>", 32, 48, 16);
    game.load.spritesheet('badGuy', "<%= asset_path 'yuuzhenvong.png'%>", 32, 48, 16);
    game.load.image('bullet', "<%=asset_path 'bullet.png'%>")
    game.load.image('boom', "<%=asset_path 'explo.png'%>", 32, 48, 17);
}

var map;
var layer;
var cursors;
var bulletTime = 0;
var badGroup;
var totalScore = 0;



function create() {

    //Create the Game World
    game.stage.backgroundColor = 'black';
    game.world.setBounds(0, 0, 4064, 608);
    map = game.add.tilemap('level_one');
    map.addTilesetImage("castle_0", 'tiles');
    bgLayer = map.createLayer("Tile Layer 1");
    collide = map.createLayer("collision");
    map.setCollisionBetween(0, 280, true, collide);



    // Add the player to the game world and set physics
    player = game.add.sprite(game.world.width - 4063, game.world.height - 150, 'dude');
    game.physics.arcade.enable(player);
    game.camera.follow(player);
    player.health = 100;
    player.body.checkCollision.up = false;
    player.body.gravity.y = 350;
    player.body.collideWorldBounds = true;
    player.animations.add('left', [4, 5, 6, 7], 10, true);
    player.animations.add('right', [8, 9, 10, 11], 10, true);
    

    //Add bad guys to the game world 
    badGuy = game.add.group();
    game.physics.arcade.enable(badGuy, Phaser.Physics.ARCADE);
    badGuy.enableBody = true;
    createBadGuys();
    
    //Add explosion animation 
    explosions = game.add.group();
    explosions.createMultiple(30, 'boom');
    explosions.forEach(setupBadGuy, this);

    scoreString = 'Score : ';
    scoreText = game.add.text(10, 10, scoreString + totalScore, { font: '34px Arial', fill: '#fff' });
    scoreText.fixedToCamera = true;
   

    //Creates the bullets the hero shoots, making each one a collidable object    
    bullets = game.add.group();
    bullets.enableBody = true;
    bullets.createMultiple(100, 'bullet');
    bullets.setAll('anchor.x', 0);
    bullets.setAll('anchor.y', 0.2);
    bullets.setAll('outOfBoundsKill', true);
    bullets.setAll('checkWorldBounds', true);
    game.physics.enable(bullets, Phaser.Physics.ARCADE);

 
    // Sets the game controls
    cursors = game.input.keyboard.createCursorKeys();
    spaceKey = game.input.keyboard.addKey(Phaser.Keyboard.SPACEBAR);
    


}

function createBadGuys() {
    var numberOfBadGuys = 200;
     for(var i =0; i < numberOfBadGuys; i++){
        badGuy1 = badGuy.create(game.world.randomX, game.world.randomY, 'badGuy', 3, true);
        badGuy1.health = 100;
        badGuy1.collideWorldBounds = true;
        badGuy1.animations.add('left', [4, 5, 6, 7], 10, true);
        badGuy1.animations.add('right', [8, 9, 10, 11], 10, true);
        game.physics.arcade.enable(badGuy1);
        badGuy1.body.gravity.y = 300;
        badGuy1.play('left', 5);
        badGuy1.body.velocity.x = -10;

    }
}


function update() {
    // Sets the layer that the player can collide with in the game world
    game.physics.arcade.collide(player, collide);
    game.physics.arcade.collide(badGuy, collide);

    player.body.velocity.x = 0;

    if (cursors.left.isDown) {
        //  Move to the left
        player.body.velocity.x = -150;
        player.animations.play('left');
        facing = 'left'
    } else if (cursors.right.isDown) {
        //  Move to the right
        player.body.velocity.x = 150;
        player.animations.play('right');
        facing = 'right'
    } else {
        //  Stand still
        player.animations.stop();
        player.frame = 0;
        facing = 'right'
    }

    //  Allow the player to jump if they are touching the ground.
    if (cursors.up.isDown && player.body.onFloor()) {
        player.body.velocity.y = -300;
    }

    // Allow player to shoot 
    if (spaceKey.isDown) {
        shoot();
    }

    if(player.body.x === 3985 && player.body.y === 208){
        winString = " YOU WIN CLICK SCREEN TO RESTART"
        winText = game.add.text(50, 100, winString, { font: '34px Arial', fill: '#fff' });
        winText.fixedToCamera = true;
        //the "click to restart" handler
        game.paused = true;
        game.input.onTap.addOnce(restart,this);
    }
    

    game.physics.arcade.overlap(bullets, badGuy, killEnemy, null, this);
    game.physics.arcade.overlap(badGuy, player, hurtHero, null, this);

}

function setupBadGuy(badGuy) {
    badGuy.anchor.x = 0.5;
    badGuy.anchor.y = 0.5;
    badGuy.animations.add('boom');
}

function killEnemy(bullet, badGuy) {
    bullet.kill();
    badGuy.health -= 50;

    if(badGuy.health == 0){
    totalScore += 50;
    scoreText.text = scoreString + totalScore;
    badGuy.kill();
    var explosion = explosions.getFirstExists(false);
    explosion.reset(badGuy.body.x, badGuy.body.y);
    explosion.play('boom', 10, false, true)};

}

function render() {
    
}

function hurtHero(player) {
    player.health -= 20;
    if(player.health == 0){
        player.kill()
    }
}

function shoot() {

    // limit the timing of firing bullets
    if (game.time.now > bulletTime) {
        //  Grab the first bullet we can from the group of bullets 
        bullet = bullets.getFirstExists(false);

        if (bullet) {
            //  Fire from set poistion based on the players position
            bullet.reset(player.x - 20, player.y + 8);
            if (facing == 'right') {
                bullet.body.velocity.x = 400;
            }
            if (facing == 'left') {
                bullet.body.velocity.x = -400;
            }
            bulletTime = game.time.now + 200;
        }
    }

}


function restart () {

    var newScore = {
        score: {
            score: totalScore
        }
    }

    $.post('/scores', newScore)
    //  And brings the aliens back from the dead :)
    badGuy.removeAll();
    create();
    //hides the text
    winText.visible = false;
    game.paused = false;
    totalScore = 0;
    game.state.start(game.state.current);

}

